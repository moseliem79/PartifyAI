# -*- coding: utf-8 -*-
"""PartifyAI.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Ry-xwhb2BKL-UBbSPWnvuICiZyO-PKCL
"""

from google.colab import drive
import joblib

drive.mount('/content/drive')

model_path = '/content/drive/MyDrive/auto_parts_models/xgboost_auto_parts_model.pkl'
preprocessor_path = '/content/drive/MyDrive/auto_parts_models/xgboost_preprocessor.pkl'

final_model = joblib.load(model_path)
preprocessor = joblib.load(preprocessor_path)

print("Model and preprocessor loaded successfully.")

import pandas as pd
import numpy as np
from datetime import datetime, timedelta
from dateutil.relativedelta import relativedelta
import calendar
import joblib
from google.colab import drive
from IPython.display import display

# Mount Google Drive
drive.mount('/content/drive')

# Load model and preprocessor
model_path = '/content/drive/MyDrive/auto_parts_models/xgboost_auto_parts_model.pkl'
preprocessor_path = '/content/drive/MyDrive/auto_parts_models/xgboost_preprocessor.pkl'
final_model = joblib.load(model_path)
preprocessor = joblib.load(preprocessor_path)

# Generate synthetic historical data
products = [f"P{str(i).zfill(4)}" for i in range(1, 301)]
product_names = [f"Part_{i}" for i in range(1, 301)]
categories = ['Engine', 'Brake', 'Suspension']
brands = ['Denso', 'Bosch', 'Valeo']
car_models = ['Toyota', 'Nissan', 'Honda']

start_date = datetime.today() - relativedelta(years=3)
dates = pd.date_range(start=start_date, periods=36, freq='MS')

synthetic_data = []
for pid, pname in zip(products, product_names):
    category = np.random.choice(categories)
    brand = np.random.choice(brands)
    car_model = np.random.choice(car_models)
    unit_price = np.round(np.random.uniform(100, 1000), 2)
    for date in dates:
        units_sold = np.random.randint(1, 20)
        revenue = units_sold * unit_price
        synthetic_data.append([
            date, pid, pname, category, brand, car_model,
            unit_price, units_sold, revenue
        ])

df = pd.DataFrame(synthetic_data, columns=[
    'date', 'product_id', 'product_name', 'category', 'brand', 'car_model',
    'unit_price', 'units_sold', 'revenue'
])

# Feature engineering
df['year'] = df['date'].dt.year
df['month'] = df['date'].dt.month
df['week'] = df['date'].dt.isocalendar().week.astype(int)
df['dayofweek'] = df['date'].dt.dayofweek
df['quarter'] = df['date'].dt.quarter
df['product_category'] = df['product_name'] + '_' + df['category']
df['brand_model'] = df['brand'] + '_' + df['car_model']
df['category_model'] = df['category'] + '_' + df['car_model']
df = df.sort_values(by=['product_id', 'date'])
df['rolling_3m_units'] = df.groupby('product_id')['units_sold'].transform(lambda x: x.rolling(window=3, min_periods=1).mean())
df['rolling_7m_units'] = df.groupby('product_id')['units_sold'].transform(lambda x: x.rolling(window=7, min_periods=1).mean())
df['rolling_3m_revenue'] = df.groupby('product_id')['revenue'].transform(lambda x: x.rolling(window=3, min_periods=1).mean())
df['rolling_7m_revenue'] = df.groupby('product_id')['revenue'].transform(lambda x: x.rolling(window=7, min_periods=1).mean())
df.fillna(0, inplace=True)

# Prediction interface
def highlight(val):
    return 'background-color: #2e2e2e; color: #aaf; font-weight: bold; border: 1px solid #444;'

def predict_interface():
    all_ids = sorted(df['product_id'].unique())
    print("Available Product IDs:")
    for i in range(0, len(all_ids), 10):
        print("\t" + "\t".join(all_ids[i:i+10]))

    product_input = input("\nEnter Product IDs (comma-separated) or press Enter for all: ").strip()
    if product_input == "":
        target_ids = all_ids
    else:
        target_ids = [x.strip() for x in product_input.split(",") if x.strip() in all_ids]
        if not target_ids:
            print("‚ùå Invalid or missing Product IDs.")
            return

    try:
        months = int(input("Enter number of months to predict (1-12): ").strip())
        if not 1 <= months <= 12:
            raise ValueError
    except:
        print("‚ùå Invalid number of months.")
        return

    future_dfs = []
    today = datetime.today()
    for pid in target_ids:
        product_df = df[df['product_id'] == pid].copy()
        product_df = product_df.sort_values(by='date')
        recent = product_df.tail(9).copy()
        last_date = recent['date'].max()

        new_rows = []
        for i in range(months):
            date = (last_date + relativedelta(months=i+1)).replace(day=1)
            row = recent.iloc[-1].copy()
            row['date'] = date
            row['year'] = date.year
            row['month'] = date.month
            row['week'] = date.isocalendar()[1]
            row['dayofweek'] = date.weekday()
            row['quarter'] = (date.month - 1) // 3 + 1
            new_rows.append(row)

        future_df = pd.DataFrame(new_rows)
        future_df['product_category'] = future_df['product_name'] + '_' + future_df['category']
        future_df['brand_model'] = future_df['brand'] + '_' + future_df['car_model']
        future_df['category_model'] = future_df['category'] + '_' + future_df['car_model']
        future_df['rolling_3m_units'] = recent['rolling_3m_units'].mean()
        future_df['rolling_7m_units'] = recent['rolling_7m_units'].mean()
        future_df['rolling_3m_revenue'] = recent['rolling_3m_revenue'].mean()
        future_df['rolling_7m_revenue'] = recent['rolling_7m_revenue'].mean()

        features = [
            'product_name', 'category', 'brand', 'car_model', 'unit_price',
            'year', 'month', 'week', 'quarter', 'dayofweek',
            'product_category', 'category_model', 'brand_model',
            'rolling_3m_units', 'rolling_7m_units', 'rolling_3m_revenue', 'rolling_7m_revenue'
        ]

        X_future = preprocessor.transform(future_df[features])
        preds = final_model.predict(X_future)

        future_df['units_predicted'] = preds
        future_df['total_cost'] = preds * future_df['unit_price']
        future_df['month_name'] = future_df['month'].apply(lambda m: calendar.month_name[m]) + " " + future_df['year'].astype(str)

        out = future_df[['product_id', 'month_name', 'units_predicted', 'unit_price', 'total_cost']].copy()
        out[['units_predicted', 'unit_price', 'total_cost']] = out[['units_predicted', 'unit_price', 'total_cost']].round(0).astype(int)
        future_dfs.append(out)

    final_result = pd.concat(future_dfs).reset_index(drop=True)
    styled = final_result.style.set_table_styles(
        [{'selector': 'thead th', 'props': [('background-color', '#444'), ('color', '#fff')]}]
    ).map(highlight)

    print(f"\nüìä Prediction Summary for {months} Month(s):")
    display(styled)

predict_interface()